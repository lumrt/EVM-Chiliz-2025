/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TokenFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createNFT"
      | "deployedNFTCollections"
      | "getDeployedNFTCollections"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NFTCollectionCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createNFT",
    values: [string, string, AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedNFTCollections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedNFTCollections",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "createNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployedNFTCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedNFTCollections",
    data: BytesLike
  ): Result;
}

export namespace NFTCollectionCreatedEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    owner: AddressLike,
    name: string,
    symbol: string
  ];
  export type OutputTuple = [
    nftAddress: string,
    owner: string,
    name: string,
    symbol: string
  ];
  export interface OutputObject {
    nftAddress: string;
    owner: string;
    name: string;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TokenFactory;
  waitForDeployment(): Promise<this>;

  interface: TokenFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createNFT: TypedContractMethod<
    [
      name: string,
      symbol: string,
      owner: AddressLike,
      tokenURI: string,
      quantity: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  deployedNFTCollections: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getDeployedNFTCollections: TypedContractMethod<[], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createNFT"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      owner: AddressLike,
      tokenURI: string,
      quantity: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployedNFTCollections"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDeployedNFTCollections"
  ): TypedContractMethod<[], [string[]], "view">;

  getEvent(
    key: "NFTCollectionCreated"
  ): TypedContractEvent<
    NFTCollectionCreatedEvent.InputTuple,
    NFTCollectionCreatedEvent.OutputTuple,
    NFTCollectionCreatedEvent.OutputObject
  >;

  filters: {
    "NFTCollectionCreated(address,address,string,string)": TypedContractEvent<
      NFTCollectionCreatedEvent.InputTuple,
      NFTCollectionCreatedEvent.OutputTuple,
      NFTCollectionCreatedEvent.OutputObject
    >;
    NFTCollectionCreated: TypedContractEvent<
      NFTCollectionCreatedEvent.InputTuple,
      NFTCollectionCreatedEvent.OutputTuple,
      NFTCollectionCreatedEvent.OutputObject
    >;
  };
}
